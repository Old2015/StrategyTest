//@version=6
strategy("BTC V3 Hybrid", overlay=true, default_qty_type=strategy.percent_of_equity,
     pyramiding=4, default_qty_value=25,
     commission_type=strategy.commission.percent, commission_value=0.07)

// === Параметры индикаторов
rsiLen      = input.int(14,  "RSI Length")
rsiLow      = input.int(30,  "RSI Oversold")
maLen       = input.int(100, "MA Length")
useMAFilter = input.bool(false, "Require price < MA for entry?")

adxLen      = input.int(14,  "ADX Length")
adxTF       = input.timeframe("240", "ADX TF")
adxMax      = input.int(40,  "Макс. ADX для входа", tooltip = "Не входить, если ADX выше порога (сильный тренд)")
useADX      = input.bool(true, "Включить фильтр ADX?")

atrLen      = input.int(14,  "ATR Length")
atrMinPerc  = input.float(0.3, "Мин. ATR%", step = 0.1,
                     tooltip = "Пропускать сигналы, когда волатильность слишком низкая")
useATR      = input.bool(true, "Включить ATR-фильтр?")

// === ADX calculation replacement for missing ta.adx ===
f_adx(len) =>
    upMove   = high - high[1]
    downMove = low[1] - low
    plusDM   = upMove > downMove and upMove > 0 ? upMove : 0
    minusDM  = downMove > upMove and downMove > 0 ? downMove : 0
    tr       = math.max(math.max(high - low, math.abs(high - close[1])), math.abs(low - close[1]))
    atr      = ta.rma(tr, len)
    plusDI   = 100 * ta.rma(plusDM, len) / atr
    minusDI  = 100 * ta.rma(minusDM, len) / atr
    dx       = 100 * math.abs(plusDI - minusDI) / (plusDI + minusDI)
    ta.rma(dx, len)

// === Параметры усреднения
layer2 = input.float(1.5, "2-й слой (% ниже входа)")
layer3 = input.float(3.0, "3-й слой (% ниже входа)")
layer4 = input.float(4.5, "4-й слой (% ниже входа)")

// === Настройки выходов и риска
minProfit = input.float(0.1, "Min profit for immediate exit (%)")
deferTP   = input.float(2.0, "Deferred TP (%) if unmet")
maxBars   = input.int(1800, "Макс. баров удержания (≈2 суток на M15)")
beTrigger = input.float(0.6, "BE trigger (%)")
showLabel = input.bool(true, "Show PnL/Dur?")

// === Расчёт индикаторов
rsi  = ta.rsi(close, rsiLen)
ma   = ta.sma(close,  maLen)
adx  = request.security(syminfo.tickerid, adxTF, f_adx(adxLen))
atrP = ta.atr(atrLen) / close * 100  // ATR (%) от цены

// === Фильтры
maFilter  = not useMAFilter or close < ma
adxFilter = not useADX      or adx <= adxMax
atrFilter = not useATR      or atrP >= atrMinPerc

// === Сигналы входа (long-only)
longSignal = ta.crossover(rsi, rsiLow)
canLong    = longSignal and maFilter and adxFilter and atrFilter

// Храним цену первого входа и бар
var float prvEntryPrice = na
var int   entryBar      = na
var bool  tradeActive   = false

// линии отображения сделки
var line entryLine  = na
var line tpLine     = na
var line stopLine   = na
var line layer2Line = na
var line layer3Line = na
var line layer4Line = na

// Первый вход
if canLong
    strategy.entry("Long1", strategy.long)

// Сохраняем цену первого входа
if strategy.position_size > 0 and strategy.opentrades == 1 and not tradeActive
    prvEntryPrice := strategy.position_avg_price
    entryBar := bar_index
    tradeActive := true
    // создаем линии для текущей сделки
    entryLine := line.new(bar_index, prvEntryPrice, bar_index, prvEntryPrice,
         color=color.blue, width=2, xloc=xloc.bar_index, extend=extend.right)
    tpPrice = prvEntryPrice * (1 + deferTP / 100)
    tpLine := line.new(bar_index, tpPrice, bar_index, tpPrice,
         color=color.green, width=2, xloc=xloc.bar_index, extend=extend.right)
    // линии уровней усреднения
    layer2Line := line.new(bar_index, prvEntryPrice * (1 - layer2 / 100),
         bar_index, prvEntryPrice * (1 - layer2 / 100),
         color=color.yellow, style=line.style_dotted,
         xloc=xloc.bar_index, extend=extend.right)
    layer3Line := line.new(bar_index, prvEntryPrice * (1 - layer3 / 100),
         bar_index, prvEntryPrice * (1 - layer3 / 100),
         color=color.yellow, style=line.style_dotted,
         xloc=xloc.bar_index, extend=extend.right)
    layer4Line := line.new(bar_index, prvEntryPrice * (1 - layer4 / 100),
         bar_index, prvEntryPrice * (1 - layer4 / 100),
         color=color.yellow, style=line.style_dotted,
         xloc=xloc.bar_index, extend=extend.right)

// === Пирамидинг (усреднение при падении цены)
if strategy.position_size > 0 and not na(prvEntryPrice)
    dropP = (prvEntryPrice - close) / prvEntryPrice * 100
    if dropP >= layer2 and strategy.opentrades == 1
        strategy.entry("Long2", strategy.long)
    if dropP >= layer3 and strategy.opentrades == 2
        strategy.entry("Long3", strategy.long)
    if dropP >= layer4 and strategy.opentrades == 3
        strategy.entry("Long4", strategy.long)

// === Вычисление прибыли позиции
posProfitPerc = strategy.position_size != 0 ? (close - strategy.position_avg_price) / strategy.position_avg_price * 100 : 0.0

// обновляем линии во время открытой сделки
if strategy.position_size > 0 and tradeActive
    curTP = strategy.position_avg_price * (1 + deferTP / 100)
    line.set_y1(tpLine, curTP)
    line.set_y2(tpLine, curTP)

// Индикатор выхода: возврат RSI к среднему
exitSig = ta.crossover(rsi, 50)

// === Логика выхода
if strategy.position_size > 0 and exitSig
    if posProfitPerc >= minProfit
        strategy.close("Long1")
    else
        tpPrice = strategy.position_avg_price * (1 + deferTP / 100)
        strategy.exit("DeferredTP", "Long1", limit = tpPrice)

// === Fail-safe по времени или противоположному сигналу
failSig = ta.crossunder(rsi, rsiLow)
if strategy.position_size > 0
    if bar_index - entryBar > maxBars or failSig
        strategy.close("Long1")

// === Перевод стопа в безубыток
if strategy.position_size > 0 and posProfitPerc >= beTrigger
    be = strategy.position_avg_price
    strategy.exit("BE", "Long1", stop = be)
    if na(stopLine)
        stopLine := line.new(entryBar, be, bar_index, be,
             color=color.red, width=2, xloc=xloc.bar_index, extend=extend.right)
    else
        line.set_y1(stopLine, be)
        line.set_y2(stopLine, be)

// === Лейблы с итоговой прибылью и длительностью сделки
var int lastCloseBar = na
if showLabel and strategy.position_size == 0 and not na(entryBar) and (na(lastCloseBar) or lastCloseBar != bar_index)
    tradePnL = (close - prvEntryPrice) / prvEntryPrice * 100
    durBars  = bar_index - entryBar
    label.new(bar_index, close, yloc = yloc.abovebar, style=label.style_label_down,
         color = tradePnL >= 0 ? color.green : color.red,
         text = "P/L " + str.tostring(tradePnL, format.percent) + "\nBars " + str.tostring(durBars))
    lastCloseBar := bar_index

// завершаем отрисовку линий при выходе из позиции
if strategy.position_size == 0 and tradeActive
    exitBar = bar_index
    line.set_extend(entryLine, extend.none)
    line.set_x2(entryLine, exitBar)
    line.set_extend(tpLine, extend.none)
    line.set_x2(tpLine, exitBar)
    line.set_extend(layer2Line, extend.none)
    line.set_x2(layer2Line, exitBar)
    line.set_extend(layer3Line, extend.none)
    line.set_x2(layer3Line, exitBar)
    line.set_extend(layer4Line, extend.none)
    line.set_x2(layer4Line, exitBar)
    if not na(stopLine)
        line.set_extend(stopLine, extend.none)
        line.set_x2(stopLine, exitBar)
    tradeActive := false
    entryLine := na
    tpLine := na
    stopLine := na
    layer2Line := na
    layer3Line := na
    layer4Line := na
    prvEntryPrice := na
    entryBar := na

// Рекомендации по адаптации под 1m/3m: увеличить maxBars для удержания (например, в 3-5 раз)